export interface OFXTransaction {
  date: string
  amount: number
  description: string
  type: "debit" | "credit"
  referenceNumber?: string
}

export interface OFXStatement {
  bankName: string
  accountNumber: string
  statementDate: string
  balance: number
  transactions: OFXTransaction[]
}

export class OFXParser {
  static parseOFX(ofxContent: string): OFXStatement {
    console.log("üîç Iniciando parse do arquivo OFX...")

    try {
      // Limpar e normalizar o conte√∫do OFX
      const cleanContent = ofxContent.replace(/\r\n/g, "\n").replace(/\r/g, "\n").trim()

      console.log("üìÑ Conte√∫do OFX limpo, tamanho:", cleanContent.length)

      // Extrair informa√ß√µes da conta
      const accountNumber = this.extractValue(cleanContent, "ACCTID") || "N/A"
      const bankName = "Bradesco"

      // Extrair saldo
      const balanceStr = this.extractValue(cleanContent, "BALAMT")
      const balance = balanceStr ? Number.parseFloat(balanceStr) : 0

      // Extrair data do extrato - com fallback seguro
      const statementDateStr = this.extractValue(cleanContent, "DTEND") || this.extractValue(cleanContent, "DTSERVER")
      const statementDate = statementDateStr
        ? this.parseOFXDate(statementDateStr)
        : new Date().toISOString().split("T")[0]

      console.log("üè¶ Dados da conta extra√≠dos:", { accountNumber, balance, statementDate })

      // Extrair transa√ß√µes
      const transactions = this.extractTransactions(cleanContent)

      console.log("üí∞ Transa√ß√µes extra√≠das:", transactions.length)

      return {
        bankName,
        accountNumber,
        statementDate,
        balance,
        transactions,
      }
    } catch (error) {
      console.error("‚ùå Erro ao processar OFX:", error)
      throw new Error(`Erro ao processar arquivo OFX: ${error}`)
    }
  }

  private static extractValue(content: string, tag: string): string | null {
    const regex = new RegExp(`<${tag}>([^<]+)`, "i")
    const match = content.match(regex)
    return match ? match[1].trim() : null
  }

  private static extractTransactions(content: string): OFXTransaction[] {
    const transactions: OFXTransaction[] = []

    // Buscar blocos de transa√ß√£o <STMTTRN> - usando flag 's' compat√≠vel
    const transactionRegex = /<STMTTRN>([\s\S]*?)<\/STMTTRN>/gi
    let match: RegExpExecArray | null

    console.log("üîç Buscando transa√ß√µes no conte√∫do OFX...")

    while ((match = transactionRegex.exec(content)) !== null) {
      const transactionBlock = match[1]

      try {
        // Extrair dados da transa√ß√£o
        const trnType = this.extractValue(transactionBlock, "TRNTYPE")
        const datePosted = this.extractValue(transactionBlock, "DTPOSTED")
        const amount = this.extractValue(transactionBlock, "TRNAMT")
        const fitId = this.extractValue(transactionBlock, "FITID")

        // Tentar m√∫ltiplos campos para descri√ß√£o (ordem de prioridade)
        const memo =
          this.extractValue(transactionBlock, "MEMO") ||
          this.extractValue(transactionBlock, "NAME") ||
          this.extractValue(transactionBlock, "PAYEEID") ||
          this.extractValue(transactionBlock, "CHECKNUM") ||
          "Transa√ß√£o banc√°ria"

        if (!datePosted || !amount) {
          console.warn(`‚ö†Ô∏è Transa√ß√£o incompleta, pulando...`)
          continue
        }

        const parsedAmount = Number.parseFloat(amount)
        const transactionDate = this.parseOFXDate(datePosted)

        // Determinar tipo da transa√ß√£o (cr√©dito ou d√©bito)
        const type: "debit" | "credit" = parsedAmount >= 0 ? "credit" : "debit"

        // Preservar a descri√ß√£o original com limpeza m√≠nima
        const cleanedDescription = this.preserveOriginalDescription(memo)

        transactions.push({
          date: transactionDate,
          amount: Math.abs(parsedAmount), // Sempre positivo, o tipo indica se √© d√©bito ou cr√©dito
          description: cleanedDescription,
          type,
          referenceNumber: fitId || undefined,
        })

        console.log(`‚úÖ Transa√ß√£o processada:`, {
          date: transactionDate,
          amount: Math.abs(parsedAmount),
          type,
          description: cleanedDescription.substring(0, 50) + "...",
        })
      } catch (error) {
        console.error(`‚ùå Erro ao processar transa√ß√£o:`, error)
      }
    }

    return transactions
  }

  private static parseOFXDate(ofxDate: string): string {
    // OFX usa formato YYYYMMDD ou YYYYMMDDHHMMSS
    const dateOnly = ofxDate.substring(0, 8)
    const year = dateOnly.substring(0, 4)
    const month = dateOnly.substring(4, 6)
    const day = dateOnly.substring(6, 8)

    return `${year}-${month}-${day}`
  }

  // Nova fun√ß√£o que preserva melhor a descri√ß√£o original
  private static preserveOriginalDescription(description: string): string {
    return (
      description
        .replace(/\s+/g, " ") // M√∫ltiplos espa√ßos em um s√≥
        .trim()
        // Manter a descri√ß√£o original sem converter para mai√∫scula
        // para que a formata√ß√£o seja feita apenas na concilia√ß√£o
        .substring(0, 200)
    ) // Limita tamanho
  }

  // M√©todo para validar se o arquivo √© um OFX v√°lido
  static isValidOFX(content: string): boolean {
    const hasOFXHeader = content.includes("OFXHEADER") || content.includes("<OFX>")
    const hasStatements = content.includes("<STMTRS>") || content.includes("<STMTTRN>")

    return hasOFXHeader && hasStatements
  }

  // M√©todo para detectar o banco (espec√≠fico para Bradesco)
  static detectBank(content: string): string {
    if (content.includes("BRADESCO") || content.includes("237")) {
      return "Bradesco"
    }
    return "Banco n√£o identificado"
  }
}
